package com.example.plgsystem.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;

public class ServeRecordTest {

    private ServeRecord serveRecord;
    private final String vehicleId = "V001";
    private final String orderId = "O001";
    private final int volumeM3 = 100;
    private final LocalDateTime serveDate = LocalDateTime.now();

    @BeforeEach
    public void setUp() {
        serveRecord = new ServeRecord(vehicleId, orderId, volumeM3, serveDate);
    }

    @Test
    public void testServeRecordCreation() {
        assertNotNull(serveRecord);
        assertNull(serveRecord.getId()); // ID should be null until saved to database
        assertEquals(vehicleId, serveRecord.getVehicleId());
        assertEquals(orderId, serveRecord.getOrderId());
        assertEquals(volumeM3, serveRecord.getVolumeM3());
        assertEquals(serveDate, serveRecord.getServeDate());
    }

    @Test
    public void testNoArgsConstructor() {
        // Test the no-args constructor required by JPA
        ServeRecord emptyRecord = new ServeRecord();
        
        assertNotNull(emptyRecord);
        assertNull(emptyRecord.getId());
        assertNull(emptyRecord.getVehicleId());
        assertNull(emptyRecord.getOrderId());
        assertEquals(0, emptyRecord.getVolumeM3());
        assertNull(emptyRecord.getServeDate());
    }

    @Test
    public void testToString() {
        String recordString = serveRecord.toString();
        
        assertTrue(recordString.contains(vehicleId));
        assertTrue(recordString.contains(String.valueOf(volumeM3)));
        assertTrue(recordString.contains("mÂ³"));
        
        // Format date as in the toString method
        String formattedDate = serveDate.format(java.time.format.DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));
        assertTrue(recordString.contains(formattedDate));
    }

    @Test
    public void testClone() {
        ServeRecord clonedRecord = serveRecord.clone();
        
        assertNotNull(clonedRecord);
        assertNotSame(serveRecord, clonedRecord);
        
        // Fields should match
        assertEquals(serveRecord.getVehicleId(), clonedRecord.getVehicleId());
        assertEquals(serveRecord.getOrderId(), clonedRecord.getOrderId());
        assertEquals(serveRecord.getVolumeM3(), clonedRecord.getVolumeM3());
        assertEquals(serveRecord.getServeDate(), clonedRecord.getServeDate());
        
        // ID doesn't get cloned (it's generated by the database)
        assertNull(clonedRecord.getId());
    }
    
    @Test
    public void testEquality() {
        // Same fields but different objects
        ServeRecord sameRecord = new ServeRecord(vehicleId, orderId, volumeM3, serveDate);
        
        // Different records
        ServeRecord differentVehicle = new ServeRecord("V002", orderId, volumeM3, serveDate);
        ServeRecord differentOrder = new ServeRecord(vehicleId, "O002", volumeM3, serveDate);
        ServeRecord differentVolume = new ServeRecord(vehicleId, orderId, volumeM3 + 50, serveDate);
        ServeRecord differentDate = new ServeRecord(vehicleId, orderId, volumeM3, serveDate.plusDays(1));
        
        // Object equality test
        assertNotEquals(serveRecord, sameRecord); // Should be different objects
        
        // Field equality tests
        assertEquals(serveRecord.getVehicleId(), sameRecord.getVehicleId());
        assertEquals(serveRecord.getOrderId(), sameRecord.getOrderId());
        assertEquals(serveRecord.getVolumeM3(), sameRecord.getVolumeM3());
        assertEquals(serveRecord.getServeDate(), sameRecord.getServeDate());
        
        // Field inequality tests
        assertNotEquals(serveRecord.getVehicleId(), differentVehicle.getVehicleId());
        assertNotEquals(serveRecord.getOrderId(), differentOrder.getOrderId());
        assertNotEquals(serveRecord.getVolumeM3(), differentVolume.getVolumeM3());
        assertNotEquals(serveRecord.getServeDate(), differentDate.getServeDate());
    }
} 